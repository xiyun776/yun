#include<sys/stat.h>
#include<sys/mman.h>
#include<errno.h>
#include<sys/types.h>
#include<sys/wait.h>
#include<unistd.h>
#include<stdlib.h>
#include<fcntl.h>
#include<string.h>
#include<stdio.h>
#include<time.h>
#include<mqueue.h>
int main()
{
	struct mq_attr attr;
	attr.mq_maxmsg = 10;
	attr.mq_msgsize = 100;
	attr.mq_flags = 0;
	attr.mq_curmsgs = 0;
	char* mq_name = "/father_son_mq";
	mqd_t mqdes = mq_open(mq_name, O_RDWR | O_CREAT, 0644, &attr);
	if (mqdes == (mqd_t)-1)
	{
		perror("mq_open");
		exit(EXIT_FAILURE);
	}
	pid_t pid = fork();
	if (pid < 0)
	{
		perror("fork");
		exit(EXIT_FAILURE);
	}
	else if(pid==0)
	{
		char read_buf[100];
		struct timespec time_info;
		for (int i = 0; i < 10; i++)
		{
			memset(read_buf, 0, 100);
			clock_gettime(0, &time_info);
			time_info.tv_sec += 15;
			if (mq_timedreceive(mqdes, read_buf, 100, NULL, &time_info) == -1)
				perror("mq_timedreceive");
			printf("子进程接收到数据: %s\n", read_buf);
		}
	}
	else {
		char send_buf[100];
		struct timespec time_info;
		for (int i = 0; i < 10; i++)
		{
			memset(send_buf, 0, 100);
			sprintf(send_buf, "父进程第%d次发送消息\n", i + 1);
			clock_gettime(0, &time_info);
			time_info.tv_sec += 5;
			if (mq_timedsend(mqdes, send_buf, strlen(send_buf), 0, &time_info) == -1)
				perror("mq_timedsend");
			printf("父进程发送消息,休眠1s\n");
			sleep(1);
		}
	}
	close(mqdes);
	if (pid > 0)
		mq_unlink(mq_name);
	return 0;
}
